#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
error_log  logs/error.log  debug;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}



http {
  include       mime.types;
  default_type  application/octet-stream;

  # Main zone used for rate-limiting
  limit_req_zone $binary_remote_addr zone=normaluser:5m rate=20r/s;

  #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  #                  '$status $body_bytes_sent "$http_referer" '
  #                  '"$http_user_agent" "$http_x_forwarded_for"';

  #access_log  logs/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  keepalive_timeout  65;
  ssl_session_cache   shared:SSL:10m;
  ssl_session_timeout 10m;

  # SSL certificates
  ssl_certificate        /home/deploy/scripts/ssl_cert/sslchain.crt;
  ssl_certificate_key    /home/deploy/scripts/ssl_cert/server.key;


  # Information about the request to be transmitted to downstream servers
  # They will choose to trust it or not (cf 'trust proxy' option in Express)
  proxy_set_header  Host  $http_host;
  proxy_set_header  X-Forwarded-Proto  $scheme;
  proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;


  # Reverse proxy to the node servers
  server {
    listen       80;
    server_name  stats.tldr.io;

    auth_basic	 "Restricted";
    auth_basic_user_file	statshtpasswd;

    location / {
      proxy_pass    http://127.0.0.1:1234/;
    }
  }

  # Database administration
  server {
    server_name dbgui.tldr.io;
    listen 443 ssl;

    auth_basic "Restricted";
    auth_basic_user_file	smoghtpasswd;

    location / {
      proxy_pass  http://127.0.0.1:2762/;
    }
  }

  # CI
  server {
    server_name ci.tldr.io;
    listen 443 ssl;

    location / {
      proxy_pass  http://127.0.0.1:2009/;
    }
  }

  server {
    listen       80;
    server_name  proxy.tldr.io;

    location / {
      proxy_pass    http://127.0.0.1:8914/;
    }
  }

  # Reverse proxy to the node servers
  server {
    server_name  api.tldr.io;

    listen 80;
    listen 443 ssl;
    limit_req zone=normaluser burst=5;

    add_header  "Cache-Control"  "max-age=1, must-revalidate";

    location /page/ {
      rewrite  ^/page/(.*)  http://tldr.io/page/$1  last;
    }

    location /staging/ {
      proxy_pass      http://127.0.0.1:9002/;
    }

    location / {
      proxy_pass      http://127.0.0.1:9001/;
    }
  }


  # Reverse proxy to the website, BM and assets, in prod and staging
  server {
    server_name  tldr.io;

    listen 80;
    listen 443 ssl;

    gzip on;
    gzip_proxied any;
    gzip_types text/plain text/html text/css application/x-javascript text/javascript application/javascript; 
    gzip_comp_level 6;

    add_header  "Cache-Control"  "max-age=1, must-revalidate";

    proxy_intercept_errors  on;
    error_page  404 403  /errors/error_404.html;
    error_page  500 502  /errors/error_502.html;
    # error_page  500  /errors/maintenance.html;   # Uncomment me to put the website in maintenance
    location /errors/ {
      alias /home/deploy/live/error-pages/;
    }
    # return 502;   # Uncomment me to put the website in maintenance

    # Bookmarklet Prod config
    location /bookmarklet/ {
      alias /home/deploy/live/master/bookmarklet/;
    }

    # Iframe Prod config
    location /iframe/ {
      alias /home/deploy/live/master/iframe/;
    }

    # Page Prod config
    location /page/ {
      alias /home/deploy/live/master/page/;
    }

    # FF Prod config
    location /firefox/ {
      alias /home/deploy/live/master/firefox/;
    }

    # Embed Prod config
    location /embed/ {
      alias /home/deploy/live/master/embed/;
    }

    # Website Prod config
    location /assets/ {
      alias      /home/deploy/live/master/website/assets/;
    }
 
    location /src/ {
      alias      /home/deploy/live/master/website/src/;
    }

    location /sitemaps/ {
      alias  /home/deploy/live/master/tldr-api/robots/sitemaps/;
    }

    location /rss-feeds/ {
      alias  /home/deploy/live/master/tldr-api/rss/feeds/;
    }

    location = /robots.txt {
      root /;
      try_files   /home/deploy/live/master/tldr-api/robots/robots.txt  = 404;
    }

    location / {
      proxy_pass  http://localhost:5001/;
    }

    # Will match all requests with a trailing slash before
    # any of the other location blocks and remove the it
    location ~ ^(.+)\/$ {
      rewrite ^(.+)\/$  $1 permanent;
    }
  }


  server {
    server_name  staging.tldr.io;

    listen 80;
    listen 443 ssl;

    add_header  "Cache-Control"  "max-age=1, must-revalidate";

    #add_header Access-Control-Allow-Origin http://staging.tldr.io;

    # Bookmarklet Staging config
    location /bookmarklet/ {
      alias /home/deploy/live/staging/bookmarklet/;
    }

    # Iframe Staging config
    location /iframe/ {
      alias /home/deploy/live/staging/iframe/;
    }

    # Page Staging config
    location /page/ {
      alias /home/deploy/live/staging/page/;
    }

    # Embed Staging config
    location /embed/ {
      alias /home/deploy/live/staging/embed/;
    }

    # FF Staging config
    location /firefox/ {
      alias /home/deploy/live/staging/firefox/;
    }

    # Website Staging config
    location /assets/ {
      alias      /home/deploy/live/staging/website/assets/;
    }
 
    location /src/ {
      alias      /home/deploy/live/staging/website/src/;
    }

    location = /robots.txt {
      root /;
      try_files   /home/deploy/live/staging/tldr-api/robots/robots.staging.txt  = 404;
    }

    location / {
      proxy_pass  http://localhost:5002/;
    }

    # Will match all requests with a trailing slash before
    # any of the other location blocks and remove the it
    location ~ ^(.+)\/$ {
      rewrite ^(.+)\/$  $1 permanent;
    }
  }


  # Permanent redirection to tldr.io
  server {
    listen       80;
    server_name  www.tldr.io;

    rewrite ^ http://tldr.io$request_uri? permanent;
  }


  # Default answer if no other virtual server is matched: a 444 error which corresponds to Nginx closing the connection and not sending any data
  server {
    listen    80 default_server;

    location / {
      return 444;
    }
  }



}
